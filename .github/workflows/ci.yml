name: CI

# yamllint disable-line rule:truthy
on:
  push:
  pull_request: ~

env:
  CACHE_VERSION: 5
  PYTHON_VERSION_DEFAULT: '3.9.15'
  PRE_COMMIT_HOME: ~/.cache/pre-commit

jobs:
  # Separate job to pre-populate the base dependency cache
  # This prevent upcoming jobs to do the same individually
  prepare-base:
    name: Prepare base dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8.14', '3.9.15', '3.10.8', '3.11.0']
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        id: python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: venv
          key: >-
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-base-venv-${{
            steps.python.outputs.python-version }}-${{
            hashFiles('setup.py', 'requirements_test.txt') }}
      - name: Create Python virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install -U pip setuptools pre-commit
          pip install -r requirements_test.txt
          pip install -e .

  pre-commit:
    name: Prepare pre-commit environment
    runs-on: ubuntu-latest
    needs: prepare-base
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3
      - name: Set up Python ${{ env.PYTHON_VERSION_DEFAULT }}
        uses: actions/setup-python@v4
        id: python
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3
        with:
          fail-on-cache-miss: true
          path: venv
          key: >-
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-base-venv-${{
            steps.python.outputs.python-version }}-${{
            hashFiles('setup.py', 'requirements_test.txt') }}
      - name: Restore pre-commit environment from cache
        id: cache-precommit
        uses: actions/cache@v3
        with:
          path: ${{ env.PRE_COMMIT_HOME }}
          key: |
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Install pre-commit dependencies
        if: steps.cache-precommit.outputs.cache-hit != 'true'
        run: |
          # `HOME` within the variable won't be expanded by the GitHub action
          export PRE_COMMIT_HOME="${PRE_COMMIT_HOME/#\~/$HOME}"

          . venv/bin/activate
          pre-commit clean
          mkdir -p ${{ env.PRE_COMMIT_HOME }}
          pre-commit install --install-hooks
          find ${{ env.PRE_COMMIT_HOME }}

  lint-black:
    name: Check black
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3
      - name: Set up Python ${{ env.PYTHON_VERSION_DEFAULT }}
        uses: actions/setup-python@v4
        id: python
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3
        with:
          fail-on-cache-miss: true
          path: venv
          key: >-
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-base-venv-${{
            steps.python.outputs.python-version }}-${{
            hashFiles('setup.py', 'requirements_test.txt') }}
      - name: Restore pre-commit environment from cache
        id: cache-precommit
        uses: actions/cache@v3
        with:
          fail-on-cache-miss: true
          path: ${{ env.PRE_COMMIT_HOME }}
          key: |
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Run black
        run: |
          . venv/bin/activate
          pre-commit run --hook-stage manual black --all-files --show-diff-on-failure

  lint-flake8:
    name: Check flake8
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3
      - name: Set up Python ${{ env.PYTHON_VERSION_DEFAULT }}
        uses: actions/setup-python@v4
        id: python
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3
        with:
          fail-on-cache-miss: true
          path: venv
          key: >-
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-base-venv-${{
            steps.python.outputs.python-version }}-${{
            hashFiles('setup.py', 'requirements_test.txt') }}
      - name: Restore pre-commit environment from cache
        id: cache-precommit
        uses: actions/cache@v3
        with:
          fail-on-cache-miss: true
          path: ${{ env.PRE_COMMIT_HOME }}
          key: |
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Register flake8 problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/flake8.json"
      - name: Run flake8
        run: |
          . venv/bin/activate
          pre-commit run --hook-stage manual flake8 --all-files

  lint-isort:
    name: Check isort
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3
      - name: Set up Python ${{ env.PYTHON_VERSION_DEFAULT }}
        uses: actions/setup-python@v4
        id: python
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3
        with:
          fail-on-cache-miss: true
          path: venv
          key: >-
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-base-venv-${{
            steps.python.outputs.python-version }}-${{
            hashFiles('setup.py', 'requirements_test.txt') }}
      - name: Restore pre-commit environment from cache
        id: cache-precommit
        uses: actions/cache@v3
        with:
          fail-on-cache-miss: true
          path: ${{ env.PRE_COMMIT_HOME }}
          key: |
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Run isort
        run: |
          . venv/bin/activate
          pre-commit run --hook-stage manual isort --all-files --show-diff-on-failure

  lint-codespell:
    name: Check codespell
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3
      - name: Set up Python ${{ env.PYTHON_VERSION_DEFAULT }}
        uses: actions/setup-python@v4
        id: python
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3
        with:
          fail-on-cache-miss: true
          path: venv
          key: >-
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-base-venv-${{
            steps.python.outputs.python-version }}-${{
            hashFiles('setup.py', 'requirements_test.txt') }}
      - name: Restore pre-commit environment from cache
        id: cache-precommit
        uses: actions/cache@v3
        with:
          fail-on-cache-miss: true
          path: ${{ env.PRE_COMMIT_HOME }}
          key: |
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Register codespell problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/codespell.json"
      - name: Run codespell
        run: |
          . venv/bin/activate
          pre-commit run --hook-stage manual codespell --all-files --show-diff-on-failure

  lint-mypy:
    name: Check mypy
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3
      - name: Set up Python ${{ env.PYTHON_VERSION_DEFAULT }}
        uses: actions/setup-python@v4
        id: python
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3
        with:
          fail-on-cache-miss: true
          path: venv
          key: >-
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-base-venv-${{
            steps.python.outputs.python-version }}-${{
            hashFiles('setup.py', 'requirements_test.txt') }}
      - name: Restore pre-commit environment from cache
        id: cache-precommit
        uses: actions/cache@v3
        with:
          fail-on-cache-miss: true
          path: ${{ env.PRE_COMMIT_HOME }}
          key: |
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Run mypy
        run: |
          . venv/bin/activate
          pre-commit run --hook-stage manual mypy --all-files --show-diff-on-failure

  pytest:
    runs-on: ubuntu-latest
    needs: prepare-base
    strategy:
      matrix:
        python-version: ['3.8.14', '3.9.15', '3.10.8', '3.11.0']
    name: >-
      Run tests Python ${{ matrix.python-version }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        id: python
        with:
          python-version: ${{ matrix.python-version }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3
        with:
          fail-on-cache-miss: true
          path: venv
          key: >-
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-base-venv-${{
            steps.python.outputs.python-version }}-${{
            hashFiles('setup.py', 'requirements_test.txt') }}
      - name: Register Python problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/python.json"
      - name: Install Pytest Annotation plugin
        run: |
          . venv/bin/activate
          # Ideally this should be part of our dependencies
          # However this plugin is fairly new and doesn't run correctly
          # on a non-GitHub environment.
          pip install pytest-github-actions-annotate-failures
      - name: Run pytest
        run: |
          . venv/bin/activate
          pytest \
            -qq \
            --timeout=20 \
            --durations=10 \
            --cov zigpy \
            -o console_output_style=count \
            -p no:sugar \
            tests
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.python-version }}
          path: .coverage

  coverage:
    name: Process test coverage
    runs-on: ubuntu-latest
    needs: pytest
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        id: python
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3
        with:
          fail-on-cache-miss: true
          path: venv
          key: >-
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-base-venv-${{
            steps.python.outputs.python-version }}-${{
            hashFiles('setup.py', 'requirements_test.txt') }}
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v3
      - name: Combine coverage results
        run: |
          . venv/bin/activate
          coverage combine coverage*/.coverage*
          coverage report --fail-under=99
          coverage xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
